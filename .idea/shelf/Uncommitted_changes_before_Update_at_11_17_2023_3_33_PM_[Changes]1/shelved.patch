Index: DictionaryAssignment/src/main/java/app/controllers/AddSceneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.controllers;\r\n\r\nimport app.helper.GeneratePhonetics;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ProgressIndicator;\r\nimport javafx.scene.control.TextField;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\nimport static app.controllers.PopUp.showConfirmationPopup;\r\nimport static app.controllers.PopUp.showPopup;\r\n\r\npublic class AddSceneController {\r\n    private ContainerController myController;\r\n    @FXML\r\n    private TextField txtAdd;\r\n    @FXML\r\n    private TextField txtType;\r\n    @FXML\r\n    private TextField txtPronunciation;\r\n    @FXML\r\n    private TextField txtDescription;\r\n    @FXML\r\n    private Button addButton;\r\n    @FXML\r\n    private Button genPhonetics;\r\n    @FXML\r\n    private ProgressIndicator progressIndicator;\r\n    public AddSceneController() {\r\n\r\n    }\r\n\r\n    public void initData(ContainerController containerController) {\r\n        this.myController = containerController;\r\n    }\r\n\r\n    public void handleAddButton(ActionEvent event ) throws SQLException {\r\n        if (event.getSource() == addButton) {\r\n            boolean hasContent = (!txtAdd.getText().isEmpty() && !txtDescription.getText().isEmpty());\r\n            if (hasContent) {\r\n                if (!showConfirmationPopup(\"Are you sure you want to add this word to the dictionary?\")) {\r\n                    String pronunciation = txtPronunciation.getText();\r\n                    String word_ = txtAdd.getText();\r\n                    String type = txtType.getText();\r\n                    String description = txtDescription.getText();\r\n                    boolean ret = myController.getDictionaryManagement().getDictMain().addWordToDictionaryDatabase(word_, pronunciation, description, type);\r\n                    if (ret) {\r\n                        showPopup(\"Successfully!\");\r\n                        txtAdd.setText(\"\");\r\n                        txtPronunciation.setText(\"\");\r\n                        txtDescription.setText(\"\");\r\n                        txtType.setText(\"\");\r\n                    } else {\r\n                        showPopup(\"This word is already in the dictionary!\");\r\n                    }\r\n                }\r\n            } else {\r\n                showPopup(\"Please type the word you want to add!\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public void handleGenPhoneticsButton(ActionEvent event) throws IOException {\r\n        if (event.getSource() == genPhonetics) {\r\n            String word = txtAdd.getText();\r\n            if (!word.isEmpty()) {\r\n                AtomicReference<String> phonetics = new AtomicReference<>(\"\");\r\n                // Chạy hàm trên một luồng khác để tránh khựng lại giao diện người dùng\r\n                var executor = Executors.newSingleThreadExecutor();\r\n                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\r\n                    try {\r\n                        progressIndicator.setVisible(true);\r\n                        phonetics.set(GeneratePhonetics.getPhonetics(word));\r\n                        progressIndicator.setVisible(true);\r\n\r\n                    } catch (IOException e) {\r\n                        System.err.println(\"Cannot get pronunciation\");\r\n                    }\r\n                }, executor);\r\n\r\n                future.thenRun(() -> {\r\n                    try {\r\n                        progressIndicator.setVisible(false);\r\n                        // dùng platformer do synonymlist thuộc luồng chính\r\n                        Platform.runLater(() -> {\r\n                            txtPronunciation.clear();\r\n                            txtPronunciation.setText(phonetics.get());\r\n                        });\r\n                        executor.shutdown();\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"Cannot shutdown executor\");\r\n//                        showPopup(\"No pronunciation found\");\r\n                    }\r\n                });\r\n            } else {\r\n                showPopup(\"Please type the word first!\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DictionaryAssignment/src/main/java/app/controllers/AddSceneController.java b/DictionaryAssignment/src/main/java/app/controllers/AddSceneController.java
--- a/DictionaryAssignment/src/main/java/app/controllers/AddSceneController.java	
+++ b/DictionaryAssignment/src/main/java/app/controllers/AddSceneController.java	
@@ -77,7 +77,6 @@
                 var executor = Executors.newSingleThreadExecutor();
                 CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                     try {
-                        progressIndicator.setVisible(true);
                         phonetics.set(GeneratePhonetics.getPhonetics(word));
                         progressIndicator.setVisible(true);
 
